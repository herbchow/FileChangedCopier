package UI;

import Util.INotifyFileChanged;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.channels.FileChannel;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Herbert.Chow
 */
public class FileCopierUI extends javax.swing.JFrame implements INotifyFileChanged {
    private LoggerUI logger;
    private File sourceFile;
    private File destinationFolder;
    private File sourceFolder;
    private String sourceFileName;
    private MonitorsListModel ActiveMonitorsListModel;

    /**
     * Creates new form FileCopierWindow
     */
    public FileCopierUI() {
        initComponents();
        
        customInitComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooserDialog = new javax.swing.JFileChooser();
        jProgressBar1 = new javax.swing.JProgressBar();
        jPanel1 = new javax.swing.JPanel();
        sourceTextField = new javax.swing.JTextField();
        BrowseSourceFileButton = new javax.swing.JButton();
        destinationTextField = new javax.swing.JTextField();
        BrowseDestinationButton = new javax.swing.JButton();
        AddMonitorButton = new javax.swing.JButton();
        TabbedPane = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        LogTextArea = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        ActiveMonitorsList = new javax.swing.JList();
        RemoveMonitorButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        sourceTextField.setText("SourcePath");

        BrowseSourceFileButton.setText("Browse Source");
        BrowseSourceFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrowseSourceFileButtonActionPerformed(evt);
            }
        });

        destinationTextField.setText("DestinationPath");

        BrowseDestinationButton.setText("Browse Destination");
        BrowseDestinationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrowseDestinationButtonActionPerformed(evt);
            }
        });

        AddMonitorButton.setText("Add");
        AddMonitorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddMonitorButtonActionPerformed(evt);
            }
        });

        LogTextArea.setColumns(20);
        LogTextArea.setLineWrap(true);
        LogTextArea.setRows(5);
        jScrollPane1.setViewportView(LogTextArea);

        TabbedPane.addTab("Output", jScrollPane1);

        jScrollPane2.setViewportView(ActiveMonitorsList);

        RemoveMonitorButton.setText("Remove Monitor");
        RemoveMonitorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveMonitorButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(RemoveMonitorButton)
                        .addGap(0, 427, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RemoveMonitorButton))
        );

        TabbedPane.addTab("Active Monitors", jPanel2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(destinationTextField, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sourceTextField, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(BrowseSourceFileButton, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BrowseDestinationButton, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(AddMonitorButton, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(TabbedPane, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sourceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BrowseSourceFileButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(destinationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BrowseDestinationButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(AddMonitorButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TabbedPane)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BrowseSourceFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrowseSourceFileButtonActionPerformed
        // TODO add your handling code here:
        fileChooserDialog.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int returnValue = fileChooserDialog.showOpenDialog(FileCopierUI.this);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            sourceFile = fileChooserDialog.getSelectedFile();
            if(sourceFile.isFile())
            {
                sourceFolder = sourceFile.getParentFile();
                sourceFileName = sourceFile.getName();
            }
            else
            {
                sourceFolder = sourceFile;
            }
            logger.Log("Chose source: " + sourceFile.getName());
            sourceTextField.setText(sourceFile.getName());
        }
    }//GEN-LAST:event_BrowseSourceFileButtonActionPerformed

    private void AddMonitorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddMonitorButtonActionPerformed
        String sourcePath = sourceFolder.getAbsolutePath() + sourceFile.getName();

        logger.Log("Starting monitor task for : " + sourcePath);
        MonitorEntryWorker worker = new MonitorEntryWorker(sourceFolder, sourceFileName, destinationFolder, logger, this);
        worker.execute();

        MonitorEntry newEntry = new MonitorEntry();
        newEntry.Worker = worker;
        newEntry.EntryText = sourcePath + " ==> " + destinationFolder;
        ActiveMonitorsListModel.Add(newEntry);
    }//GEN-LAST:event_AddMonitorButtonActionPerformed

    private void BrowseDestinationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrowseDestinationButtonActionPerformed
        fileChooserDialog.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnValue = fileChooserDialog.showOpenDialog(FileCopierUI.this);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            destinationFolder = fileChooserDialog.getSelectedFile();
            if (destinationFolder.isDirectory()) {
                logger.Log("Chose destination: " + destinationFolder.getAbsolutePath());
                destinationTextField.setText(destinationFolder.getAbsolutePath());
            }
        }
    }//GEN-LAST:event_BrowseDestinationButtonActionPerformed

    private void RemoveMonitorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveMonitorButtonActionPerformed
        // Remove selected active monitor
        MonitorEntry removed = ActiveMonitorsListModel.RemoveEntry(ActiveMonitorsList.getSelectedIndex());
        removed.Worker.cancel(false);
    }//GEN-LAST:event_RemoveMonitorButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FileCopierUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FileCopierUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FileCopierUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FileCopierUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FileCopierUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList ActiveMonitorsList;
    private javax.swing.JButton AddMonitorButton;
    private javax.swing.JButton BrowseDestinationButton;
    private javax.swing.JButton BrowseSourceFileButton;
    private javax.swing.JTextArea LogTextArea;
    private javax.swing.JButton RemoveMonitorButton;
    private javax.swing.JTabbedPane TabbedPane;
    private javax.swing.JTextField destinationTextField;
    private javax.swing.JFileChooser fileChooserDialog;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField sourceTextField;
    // End of variables declaration//GEN-END:variables

    @Override
    public void onFileChanged(File sourceFile, File destFile) {
        if (!destFile.exists()) {
            try {
                destFile.createNewFile();
            } catch (IOException ex) {
                Logger.getLogger(FileCopierUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        try {
            System.out.println("sourceFile.toPath " + sourceFile.toPath());
            System.out.println("destFile.toPath " + destFile.toPath());
            File combinedDestFile = new File(destFile,sourceFile.getName());
            Files.copy(sourceFile.toPath(),combinedDestFile.toPath(),
                    StandardCopyOption.COPY_ATTRIBUTES,StandardCopyOption.REPLACE_EXISTING);
        } catch (IOException ex) {
            Logger.getLogger(FileCopierUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void customInitComponents() {
        logger = new LoggerUI(LogTextArea);
        ActiveMonitorsListModel = new MonitorsListModel();
        ActiveMonitorsList.setModel(ActiveMonitorsListModel);
    }

}
